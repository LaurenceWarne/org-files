#+TITLE: Hax

Scala LyfHax.

* Unapplying a String Interpolator

Since 2.13 you can use ~unapply~ with string interpolators:

#+begin_src scala
"0 13 * * * echo 'Every day at 1pm'" match {
  case s"$min $hour $dayOfMonth $month $dayOfWeek $cmd" => Some(cmd)
  case _                                                => None
}
// Option[String] = Some("echo 'Every day at 1pm'")
#+end_src

* null to Option

We can easily turn possible ~null~ values into an ~Option~ via ~apply~:

#+begin_src scala
val myString: String = null
Option(myString)
// Option[String] = None
#+end_src

Note without the type hint here the ~Option~ will have type ~Option[Null]~.

* Apply on Different Data Structures

** Lists

We can use the ~apply~ method on List objects to obtain the value at an index, but beware this is not safe, ~lift~ is usually a better option.

#+begin_src scala
val myList = List(1, 2, 3)
myList(1)
// 2
myList(3)
// java.lang.IndexOutOfBoundsException: 3
//   scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)
//   scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)
//   scala.collection.immutable.List.apply(List.scala:79)
#+end_src

~apply~ on Maps, Strings, Arrays, Ranges, Vectors and Seqs behaves similarly.

** Sets

~apply~ on Sets can be used to test membership:

#+begin_src scala
val bellsLt1k = Set(1, 2, 5, 15, 52, 203, 877)
bellsLt1k(203)
// true
bellsLt1k(10)
// false
#+end_src
* For Comprehension One-liner

#+begin_src scala
val rollOfTwoDie = (for (x <- (1 to 6); y <- (1 to 6)) yield x + y).sorted
// Vector(2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 11, 11, 12)
#+end_src

* Tuple to Case Class

We can use the ~.tupled~ method of [[https://www.scala-lang.org/api/current/scala/Function2.html][FunctionN]] to nicely obtain a case class instance from a tuple:

#+begin_src scala
case class Book(title: String, author: String)

val bookData = ("Old Man's War", "John Scalzi")
// Pre Scala 2.11.8
val book1 = (Book.apply _).tupled(bookData)
// The companion object of case class extends FunctionN so we can do this is 2.11.8+
val book2 = Book.tupled(bookData)
#+end_src

* Quicksort

Obligatory quicksort implementation:

#+begin_src scala
import scala.math.Ordering.Implicits._

def quicksort[A: Ordering](l: List[A]): List[A] = {
  l match {
    case Nil => Nil
    case head :: tail =>
      val (before, after) = tail.partition(_ <= head)
      (before :+ head) ::: after
  }
}
#+end_src

* Capturing Standard Output

You can easily capture standard output using ~Console.withOut~.  This saves you from having to reset the output stream when you're done if you were to use ~System.setOut~.

#+begin_src scala
val baos = new java.io.ByteArrayOutputStream()
// Note println is an alias for Console.println
Console.withOut(baos)(println("hello"))
println(baos)
// "hello"
#+end_src
