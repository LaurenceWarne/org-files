#+TITLE: X In Y Minutes

My take on the x in y minutes saga for Scala 2.

#+begin_src scala
// Also see the Scala language specification: https://www.scala-lang.org/files/archive/spec/2.13/
// The following are implicitly imported in every scala file:

// import java.lang._
// import scala._
// import scala.Predef._


//      /\  /\ !!!!!!!! /\  /\
//     |! ||! |!!!!!!!!|! ||! |
//     |! ||! |        |! ||! |
//     |! ||! | Naming |! ||! |
//     |! ||! |        |! ||! |
//     |__||__|!!!!!!!!|__||__|
//     (__)(__)!!!!!!!!(__)(__)

// In Scala 2 val and defs cannot appear as toplevel definitions

object Naming {

  // Ordinarily, we wouldn't need to provide the type of x here since it can
  // be determined via type inference, but here we voluntarily provide a
  // 'type ascription'
  val x: Int = 3

  // Here Show is a Single Abstract Method (SAM) type
  trait Show[A] {
    def show(a: A): String
  }

  // Since Scala 2.12 function literals are accepted as valid SAM expressions:
  implicit val intShow: Show[Int] = n => s"here is my integer: $n"

  // A type alias
  type MyInt = Int

  // Beware, implicit classes and defs will still apply to Int!
  import scala.concurrent.duration._
  implicit def myIntToDuration(n: MyInt): Duration = Duration(n, SECONDS)

  val myDuration: Duration = 3
}

//       /\  /\ !!!!!!!!! /\  /\
//      |! ||! |!!!!!!!!!|! ||! |
//      |! ||! |         |! ||! |
//      |! ||! | Sorting |! ||! |
//      |! ||! |         |! ||! |
//      |__||__|!!!!!!!!!|__||__|
//      (__)(__)!!!!!!!!!(__)(__)

object Sorting {

  // Ordered is the equivalent to (and indeed extends) java's Comparable, ie it
  // represents 'natural' orderings
  case class DummyInt(x: Int) extends Ordered[DummyInt] {
    def compare(that: DummyInt): Int = x - that.x
  }

  // Similarly, Ordered is the equivalent to java's Comparator, note both are
  // available without import, as they are Members of the scala package
  case class DummyLong(x: Long) extends AnyVal
  // Ordering can be considered contravariant functor, with 'on' providing the
  // equivalent of contramap
  implicit val dummyLongOrdering: Ordering[DummyLong] =
    Ordering[Long].on(dummyLong => dummyLong.x)

  val myList = List(DummyInt(10), DummyInt(1), DummyInt(-2), DummyInt(7))
  println(myList.sorted)
  // List(DummyInt(x = -2), DummyInt(x = 1), DummyInt(x = 7), DummyInt(x = 10))

  // Note the signature of sorted is sorted[B >: A](implicit ord: Ordering[B])
  // but the companion of Ordered provides an implicit conversion from Ordered[A]
  // to Ordering[A] (https://www.scala-lang.org/api/current/scala/math/Ordered$.html)
}
#+end_src
